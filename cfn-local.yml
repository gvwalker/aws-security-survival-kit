AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: aws-security-survival-kit alerting - local events - https://zoph.io
###########################################################
Parameters:
  ###########################################################
  AlarmRecipient:
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Email address required.
    Description: Alarm recipient email address
  CTLogGroupName:
    Type: String
    Description: CloudTrail LogGroup
  Project:
    Type: String
    Description: Project Name
  Region:
    Type: String
    Description: AWS Region

###############################################################################

###########################################################
Resources:
  ###########################################################

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "AWS-Security-Survival-Kit-Dashboard-${AWS::Region}"
      DashboardBody: !Sub |
        {"widgets": [{ "height": 12, "width": 24, "y": 0, "x": 0, "type": "log", "properties": { "query": "SOURCE '${CTLogGroupName}' | fields eventTime, eventName, eventSource, recipientAccountId as Account, userIdentity.sessionContext.sessionIssuer.userName as Principal, userIdentity.invokedBy as InvokedBy, errorCode\n\n\n\n | filter errorCode like /(Client.UnauthorizedOperation|AccessDenied)/", "region": "${Region}", "title": "Latest AccessDenied from CT", "view": "table" } }, { "height": 6, "width": 24, "y": 12, "x": 0, "type": "log", "properties": { "query": "SOURCE '${CTLogGroupName}' | fields eventTime, eventName, eventSource, userIdentity.sessionContext.sessionIssuer.userName as Principal, userIdentity.invokedBy as InvokedBy, responseElements.instancesSet.items.0.metadataOptions.httpTokens as IMDSv2\n\n | filter eventName like \"RunInstances\" and IMDSv2 like \"optional\"", "region": "${Region}", "title": "IMDSv1 RunInstances", "view": "table" } } ] }

  EventRuleCTChange:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${Project}-detect-cloudtrail-changes"
      Description: !Sub "[${Project}] Monitor change on CloudTrail setup"
      State: "ENABLED"
      Targets:
        - Arn:
            Ref: CtAlertingTopic
          Id: CtAlertingTopic
          InputTransformer:
            InputPathsMap:
              EventId: "$.id"
              EventTime: "$.detail.eventTime"
              EventName: "$.detail.eventName"
              EventAccountId: "$.account"
              EventSourceIp: "$.detail.sourceIPAddress"
              EventRegion: "$.region"
              EventBlame: "$.detail.userIdentity.principalId"
              EventBlameDetails: "$.detail.userIdentity.sessionContext.sessionIssuer.userName"
            # Doc: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-inputtransformer.html
            InputTemplate: |
              {
                "🆔 EventId": <EventId>,
                "🕑 EventTime": <EventTime>,
                "👉 EventName": <EventName>,
                "🧾 EventAccountId": <EventAccountId>,
                "🌐 EventSourceIp": <EventSourceIp>,
                "🌏 EventRegion": <EventRegion>,
                "👨‍🏭 EventBlame": <EventBlame>,
                "📃 EventBlameDetails": <EventBlameDetails>
              }
      EventPattern:
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudtrail.amazonaws.com"
          eventName:
            - "StopLogging"
            - "DeleteTrail"
            - "UpdateTrail"

  EventRuleExfilDisk:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${Project}-detect-disk-exfiltration"
      Description: !Sub "[${Project}] Detect exfiltration on EBS Snapshot or AMI (sharing)"
      State: "ENABLED"
      Targets:
        - Arn:
            Ref: CtAlertingTopic
          Id: CtAlertingTopic
          InputTransformer:
            InputPathsMap:
              EventId: "$.id"
              EventTime: "$.detail.eventTime"
              EventName: "$.detail.eventName"
              EventAccountId: "$.account"
              EventSourceIp: "$.detail.sourceIPAddress"
              EventRegion: "$.region"
              EventBlame: "$.detail.userIdentity.principalId"
              EventBlameDetails: "$.detail.userIdentity.sessionContext.sessionIssuer.userName"
            InputTemplate: |
              {
                "🆔 EventId": <EventId>,
                "🕑 EventTime": <EventTime>,
                "👉 EventName": <EventName>,
                "🧾 EventAccountId": <EventAccountId>,
                "🌐 EventSourceIp": <EventSourceIp>,
                "🌏 EventRegion": <EventRegion>,
                "👨‍🏭 EventBlame": <EventBlame>,
                "📃 EventBlameDetails": <EventBlameDetails>
              }
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "ModifySnapshotAttribute"
            - "ModifyImageAttribute"
            - "SharedSnapshotCopyInitiated"
            - "SharedSnapshotVolumeCreated"

  EventRuleStsWhoAmI:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${Project}-detect-sts-whoami"
      Description: !Sub "[${Project}] Detect STS get-caller-identity"
      State: "ENABLED"
      Targets:
        - Arn:
            Ref: CtAlertingTopic
          Id: CtAlertingTopic
          InputTransformer:
            InputPathsMap:
              EventId: "$.id"
              EventTime: "$.detail.eventTime"
              EventName: "$.detail.eventName"
              EventAccountId: "$.account"
              EventSourceIp: "$.detail.sourceIPAddress"
              EventRegion: "$.region"
              EventBlame: "$.detail.userIdentity.principalId"
              EventBlameDetails: "$.detail.userIdentity.sessionContext.sessionIssuer.userName"
            InputTemplate: |
              {
                "🆔 EventId": <EventId>,
                "🕑 EventTime": <EventTime>,
                "👉 EventName": <EventName>,
                "🧾 EventAccountId": <EventAccountId>,
                "🌐 EventSourceIp": <EventSourceIp>,
                "🌏 EventRegion": <EventRegion>,
                "👨‍🏭 EventBlame": <EventBlame>,
                "📃 EventBlameDetails": <EventBlameDetails>
              }
      EventPattern:
        source:
          - aws.sts
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "sts.amazonaws.com"
          eventName:
            - "GetCallerIdentity"

  EventRuleCloudShellGetFileDownloadUrls:
    # Can detect data exfil through CloudShell (ie: scrape and download credentials stored in Secrets Manager)
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${Project}-detect-cloudshell-getfiledownloadurls"
      Description: !Sub "[${Project}] Detect CloudShell GetFileDownloadUrls"
      State: "ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS"
      Targets:
        - Arn:
            Ref: CtAlertingTopic
          Id: CtAlertingTopic
          InputTransformer:
            InputPathsMap:
              EventId: "$.id"
              EventTime: "$.detail.eventTime"
              EventName: "$.detail.eventName"
              EventAccountId: "$.account"
              EventSourceIp: "$.detail.sourceIPAddress"
              EventRegion: "$.region"
              EventBlame: "$.detail.userIdentity.principalId"
              FilePath: "$.detail.requestParameters.FileDownloadPath"
              EventBlameDetails: "$.detail.userIdentity.sessionContext.sessionIssuer.userName"
            InputTemplate: |
              {
                "🆔 EventId": <EventId>,
                "🕑 EventTime": <EventTime>,
                "👉 EventName": <EventName>,
                "🧾 EventAccountId": <EventAccountId>,
                "🌐 EventSourceIp": <EventSourceIp>,
                "🌏 EventRegion": <EventRegion>,
                "📂 FilePath": <FilePath>,
                "👨‍🏭 EventBlame": <EventBlame>,
                "📃 EventBlameDetails": <EventBlameDetails>
              }
      EventPattern:
        source:
          - aws.cloudshell
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudshell.amazonaws.com"
          eventName:
            - "GetFileDownloadUrls"

  CloudWatchLogsMetricsFilterAccessDenied:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      LogGroupName: !Ref CTLogGroupName
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "CloudTrailMetrics"
          MetricName: "UnauthorizedAttemptCount"
          DefaultValue: 0

  AlarmAccessDenied:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "Unauthorized API Call [${Project}]"
      AlarmActions:
        - !Ref CtAlertingTopic
      AlarmDescription: >
        Alarm on Unauthorized API Call
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      MetricName: "UnauthorizedAttemptCount"
      Namespace: "CloudTrailMetrics"
      Period: 3600
      Statistic: Sum
      Threshold: 1
      TreatMissingData: "notBreaching"

  AlarmConsoleFailedAuth:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "Failed Console Login [${Project}]"
      AlarmDescription: !Sub "Failed Console Login [${Project}]"
      MetricName: "ConsoleLoginFailures"
      Namespace: "CloudTrailMetrics"
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "1"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref CtAlertingTopic
      TreatMissingData: "notBreaching"

  CloudWatchLogsMetricsFilterConsoleFailedAuth:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      LogGroupName: !Ref CTLogGroupName
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "CloudTrailMetrics"
          MetricName: "ConsoleLoginFailures"

  AlarmIMDSv1RunInstance:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "IMDSv1 RunInstance Detected [${Project}]"
      AlarmDescription: !Sub "IMDSv1 RunInstance Detected [${Project}]"
      MetricName: "IMDSv1RunInstance"
      Namespace: "CloudTrailMetrics"
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "1"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref CtAlertingTopic
      TreatMissingData: "notBreaching"

  CloudWatchLogsMetricsFilterIMDSv1:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      LogGroupName: !Ref CTLogGroupName
      FilterPattern: '{ ($.eventName = RunInstances) && ($.responseElements.instancesSet.items[0].metadataOptions.httpTokens = "optional") }'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "CloudTrailMetrics"
          MetricName: "IMDSv1RunInstance"

  CtAlertingTopic:
    # https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-receive-sns-for-alarm-trigger/
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub "[${AWS::AccountId}] Security Alarm"
      TopicName: !Sub "${Project}-alarm-topic-${AWS::Region}"
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlarmRecipient
      Tags:
        - Key: "Project"
          Value: !Ref Project

  SnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "__default_statement_ID"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sns:GetTopicAttributes"
              - "sns:SetTopicAttributes"
              - "sns:AddPermission"
              - "sns:RemovePermission"
              - "sns:DeleteTopic"
              - "sns:Subscribe"
              - "sns:ListSubscriptionsByTopic"
              - "sns:Publish"
              - "sns:Receive"
            Resource:
              Ref: CtAlertingTopic
            Condition:
              StringEquals:
                AWS:SourceOwner:
                  Ref: "AWS::AccountId"
          - Sid: "CWEvents"
            Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sns:Publish"
            Resource:
              Ref: CtAlertingTopic
      Topics:
        - Ref: CtAlertingTopic
